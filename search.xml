<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单点登录问题</title>
      <link href="/2019/03/21/%E5%85%B3%E4%BA%8E%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/21/%E5%85%B3%E4%BA%8E%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h4><pre><code>我觉得单点登录问题，分为两种。因为cookie不可以跨域存储和访问。</code></pre><blockquote><p>同域下。。一个用户只可以在一个地方登录。</p></blockquote><p> 项目中遇到过用户只可以在一端登录。登录成功后将会话信息存入redis并且返回前端（SET_COOKIE）;<br> 项目中加拦截器。比较请求携带的cookie和redis中的cookie是否一致。如果不一致，则在他出已经登录，反之，则通过。</p><blockquote><p>不同域下。</p></blockquote><p>只是确定一个公用的域，当访问的时候，倘若没有登录，则跳到登录服务器验证，返回token并保存。在跳转至访问地址。用凭证判断是否已经登录。<br>访问第二个域时。重定向到登录服务器校验是否已登陆，已登录则返回凭证供第二个服务使用。反之则登录。</p><img src="/2019/03/21/关于单点登录问题/001.jpg" title="cas">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPoolTaskExecutor</title>
      <link href="/2019/03/21/SpringBoot-ThreadPoolTaskExecutor%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2019/03/21/SpringBoot-ThreadPoolTaskExecutor%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ThreadPoolTaskExecutor是一个Spring的线程池技术，它是使用jdk中的java.util.concurrent.ThreadPoolExecutor进行实现。 </p></blockquote><h4 id="ThreadPoolTaskExecutor的参数："><a href="#ThreadPoolTaskExecutor的参数：" class="headerlink" title="ThreadPoolTaskExecutor的参数："></a>ThreadPoolTaskExecutor的参数：</h4><pre><code>int corePoolSize:线程池维护线程的最小数量. int maximumPoolSize:线程池维护线程的最大数量. long keepAliveTime:空闲线程的存活时间. TimeUnit unit: 时间单位,现有纳秒,微秒,毫秒,秒枚举值. BlockingQueue&lt;Runnable&gt; workQueue:持有等待执行的任务队列. RejectedExecutionHandler handler: 用来拒绝一个任务的执行，有两种情况会发生这种情况。     一是在execute方法中若addIfUnderMaximumPoolSize(command)为false，即线程池已经饱和；     二是在execute方法中, 发现runState!=RUNNING || poolSize == 0,即已经shutdown,就调用ensureQueuedTaskHandled(Runnable command)，在该方法中有可能调用reject。</code></pre><h4 id="ThredPoolTaskExcutor的处理流程："><a href="#ThredPoolTaskExcutor的处理流程：" class="headerlink" title="ThredPoolTaskExcutor的处理流程："></a>ThredPoolTaskExcutor的处理流程：</h4><pre><code>1.当池子大小小于corePoolSize，就新建线程，并处理请求2.当池子大小等于corePoolSize，把请求放入workQueue中，池子里的空闲线程就去workQueue中取任务并处理3.当workQueue放不下任务时，就新建线程入池，并处理请求，如果池子大小撑到了maximumPoolSize，就用RejectedExecutionHandler来做拒绝处理4.当池子的线程数大于corePoolSize时，多余的线程会等待keepAliveTime长时间，如果无请求可处理就自行销毁其会优先创建  CorePoolSiz 线程， 当继续增加线程时，先放入Queue中，当 CorePoolSiz  和 Queue 都满的时候，就增加创建新线程，当线程达到MaxPoolSize的时候，就会抛出错 误 org.springframework.core.task.TaskRejectedException另外MaxPoolSize的设定如果比系统支持的线程数还要大时，会抛出java.lang.OutOfMemoryError: unable to create new native thread 异常。</code></pre><h4 id="Reject策略预定义有四种："><a href="#Reject策略预定义有四种：" class="headerlink" title="Reject策略预定义有四种："></a>Reject策略预定义有四种：</h4><pre><code>(1)ThreadPoolExecutor.AbortPolicy策略，是默认的策略,处理程序遭到拒绝将抛出运行时 RejectedExecutionException。 (2)ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃. (3)ThreadPoolExecutor.DiscardPolicy策略，不能执行的任务将被丢弃. (4)ThreadPoolExecutor.DiscardOldestPolicy策略，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）.</code></pre><h4 id="使用。"><a href="#使用。" class="headerlink" title="使用。"></a>使用。</h4><h5 id="SpringBoot-Config"><a href="#SpringBoot-Config" class="headerlink" title="SpringBoot  Config"></a>SpringBoot  Config</h5><h6 id="创建，初始化。"><a href="#创建，初始化。" class="headerlink" title="创建，初始化。"></a>创建，初始化。</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  默认线程池线程池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: yangkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 13:59 2019/03/28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">defaultThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">    <span class="comment">//核心线程数目</span></span><br><span class="line">    executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//指定最大线程数</span></span><br><span class="line">    executor.setMaxPoolSize(<span class="number">15</span>);</span><br><span class="line">    <span class="comment">//队列中最大的数目</span></span><br><span class="line">    executor.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//线程名称前缀</span></span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">"apiThreadPool_"</span>);</span><br><span class="line">    <span class="comment">//rejection-policy：当pool已经达到max size的时候，如何处理新任务</span></span><br><span class="line">    <span class="comment">//CALLER_RUNS：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">    <span class="comment">//对拒绝task的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">    <span class="comment">//线程空闲后的最大存活时间</span></span><br><span class="line">    executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">    <span class="comment">//加载</span></span><br><span class="line">    executor.initialize();</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用方式。"><a href="#使用方式。" class="headerlink" title="使用方式。"></a>使用方式。</h6><pre><code>第一种方式：@Async 注解。    注： @Async所修饰的函数不要定义为static类型，这样异步调用不会生效第二种方式：    1.IOC 注入Bean        /** 通过注解引入配置 */        @Resource(name = &quot;defaultThreadPool&quot;)        private ThreadPoolTaskExecutor executor;    2.executor.execute(); 调用。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastdfs 文件配置 详解</title>
      <link href="/2019/01/16/Fastdfs-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE-%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/01/16/Fastdfs-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<pre><code>首先是 tracker.conf# is this config file disabled# false for enabled# true for disableddisabled=false# 这个配置文件是否不生效,呵呵(改成是否生效是不是会让人感觉好点呢?) false 为生效(否则不生效) true反之# bind an address of this host# empty for bind all addresses of this hostbind_addr=# 是否绑定IP,# bind_addr= 后面为绑定的IP地址 (常用于服务器有多个IP但只希望一个IP提供服务)。如果不填则表示所有的(一般不填就OK),相信较熟练的SA都常用到类似功能,很多系统和应用都有# the tracker server portport=22122# 提供服务的端口,不作过多解释了# connect timeout in seconds# default value is 30sconnect_timeout=30#连接超时时间，针对socket套接字函数connect# network timeout in secondsnetwork_timeout=60#  tracker server的网络超时，单位为秒。发送或接收数据时，如果在超时时间后还不能发送或接收数据，则本次网络通信失败。 # the base path to store data and log filesbase_path=/home/yuqing/fastdfs# base_path 目录地址(根目录必须存在,子目录会自动创建)# 附目录说明: tracker server目录及文件结构：${base_path}    |__data    |     |__storage_groups.dat：存储分组信息    |     |__storage_servers.dat：存储服务器列表    |__logs        |__trackerd.log：tracker server日志文件数据文件storage_groups.dat和storage_servers.dat中的记录之间以换行符（\n）分隔，字段之间以西文逗号（,）分隔。storage_groups.dat中的字段依次为：1. group_name：组名2. storage_port：storage server端口号storage_servers.dat中记录storage server相关信息，字段依次为：1. group_name：所属组名2. ip_addr：ip地址3. status：状态4. sync_src_ip_addr：向该storage server同步已有数据文件的源服务器5. sync_until_timestamp：同步已有数据文件的截至时间（UNIX时间戳）6. stat.total_upload_count：上传文件次数7. stat.success_upload_count：成功上传文件次数8. stat.total_set_meta_count：更改meta data次数9. stat.success_set_meta_count：成功更改meta data次数10. stat.total_delete_count：删除文件次数11. stat.success_delete_count：成功删除文件次数12. stat.total_download_count：下载文件次数13. stat.success_download_count：成功下载文件次数14. stat.total_get_meta_count：获取meta data次数15. stat.success_get_meta_count：成功获取meta data次数16. stat.last_source_update：最近一次源头更新时间（更新操作来自客户端）17. stat.last_sync_update：最近一次同步更新时间（更新操作来自其他storage server的同步）# max concurrent connections this server supported# max_connections worker threads start when this service startupmax_connections=256# 系统提供服务时的最大连接数。对于V1.x，因一个连接由一个线程服务，也就是工作线程数。# 对于V2.x，最大连接数和工作线程数没有任何关系# work thread count, should &lt;= max_connections# default value is 4# since V2.00# V2.0引入的这个参数，工作线程数，通常设置为CPU数work_threads=4# the method of selecting group to upload files# 0: round robin# 1: specify group# 2: load balance, select the max free space group to upload filestore_lookup=2# 上传组(卷) 的方式 0:轮询方式 1: 指定组 2: 平衡负载(选择最大剩余空间的组(卷)上传)# 这里如果在应用层指定了上传到一个固定组,那么这个参数被绕过# which group to upload file# when store_lookup set to 1, must set store_group to the group namestore_group=group2# 当上一个参数设定为1 时 (store_lookup=1，即指定组名时)，必须设置本参数为系统中存在的一个组名。如果选择其他的上传方式，这个参数就没有效了。# which storage server to upload file# 0: round robin (default)# 1: the first server order by ip address# 2: the first server order by priority (the minimal)store_server=0# 选择哪个storage server 进行上传操作(一个文件被上传后，这个storage server就相当于这个文件的storage server源，会对同组的storage server推送这个文件达到同步效果)# 0: 轮询方式 # 1: 根据ip 地址进行排序选择第一个服务器（IP地址最小者）# 2: 根据优先级进行排序（上传优先级由storage server来设置，参数名为upload_priority） # which path(means disk or mount point) of the storage server to upload file# 0: round robin# 2: load balance, select the max free space path to upload filestore_path=0# 选择storage server 中的哪个目录进行上传。storage server可以有多个存放文件的base path（可以理解为多个磁盘）。# 0: 轮流方式，多个目录依次存放文件# 2: 选择剩余空间最大的目录存放文件（注意：剩余磁盘空间是动态的，因此存储到的目录或磁盘可能也是变化的）# which storage server to download file# 0: round robin (default)# 1: the source storage server which the current file uploaded todownload_server=0# 选择哪个 storage server 作为下载服务器 # 0: 轮询方式，可以下载当前文件的任一storage server# 1: 哪个为源storage server 就用哪一个 (前面说过了这个storage server源 是怎样产生的) 就是之前上传到哪个storage server服务器就是哪个了# reserved storage space for system or other applications.# if the free(available) space of any stoarge server in# a group &lt;= reserved_storage_space,# no file can be uploaded to this group.# bytes unit can be one of follows:### G or g for gigabyte(GB)### M or m for megabyte(MB)### K or k for kilobyte(KB)### no unit for byte(B)### XX.XX% as ratio such as reserved_storage_space = 10%reserved_storage_space = 10%# storage server 上保留的空间，保证系统或其他应用需求空间。可以用绝对值或者百分比（V4开始支持百分比方式）。#(指出 如果同组的服务器的硬盘大小一样,以最小的为准,也就是只要同组中有一台服务器达到这个标准了,这个标准就生效,原因就是因为他们进行备份)#standard log level as syslog, case insensitive, value list:### emerg for emergency### alert### crit for critical### error### warn for warning### notice### info### debuglog_level=info# 选择日志级别(日志写在哪?看前面的说明了,有目录介绍哦 呵呵)#unix group name to run this program, #not set (empty) means run by the group of current userrun_by_group=# 操作系统运行FastDFS的用户组 (不填 就是当前用户组,哪个启动进程就是哪个)#unix username to run this program,#not set (empty) means run by current userrun_by_user=# 操作系统运行FastDFS的用户 (不填 就是当前用户,哪个启动进程就是哪个)# allow_hosts can ocur more than once, host can be hostname or ip address,# &quot;*&quot; means match all ip addresses, can use range like this: 10.0.1.[1-15,20] or# host[01-08,20-25].domain.com, for example:# allow_hosts=10.0.1.[1-15,20]# allow_hosts=host[01-08,20-25].domain.comallow_hosts=*# 可以连接到此 tracker server 的ip范围（对所有类型的连接都有影响，包括客户端，storage server）# sync log buff to disk every interval seconds# default value is 10 secondssync_log_buff_interval = 10# 同步或刷新日志信息到硬盘的时间间隔，单位为秒# 注意：tracker server 的日志不是时时写硬盘的，而是先写内存。# check storage server alive intervalcheck_active_interval = 120# 检测 storage server 存活的时间隔，单位为秒。# storage server定期向tracker server 发心跳，如果tracker server在一个check_active_interval内还没有收到storage server的一次心跳，那边将认为该storage server已经下线。所以本参数值必须大于storage server配置的心跳时间间隔。通常配置为storage server心跳时间间隔的2倍或3倍。# thread stack size, should &gt; 512KB# default value is 1MBthread_stack_size=1MB# 线程栈的大小。FastDFS server端采用了线程方式。更正一下，tracker server线程栈不应小于64KB，不是512KB。# 线程栈越大，一个线程占用的系统资源就越多。如果要启动更多的线程（V1.x对应的参数为max_connections，V2.0为work_threads），可以适当降低本参数值。# auto adjust when the ip address of the storage server changed# default value is truestorage_ip_changed_auto_adjust=true# 这个参数控制当storage server IP地址改变时，集群是否自动调整。注：只有在storage server进程重启时才完成自动调整。# storage sync file max delay seconds# default value is 86400 seconds (one day)# since V2.00storage_sync_file_max_delay = 86400# V2.0引入的参数。存储服务器之间同步文件的最大延迟时间，缺省为1天。根据实际情况进行调整# 注：本参数并不影响文件同步过程。本参数仅在下载文件时，判断文件是否已经被同步完成的一个阀值（经验值）# the max time of storage sync a file# default value is 300 seconds# since V2.00storage_sync_file_max_time = 300# V2.0引入的参数。存储服务器同步一个文件需要消耗的最大时间，缺省为300s，即5分钟。# 注：本参数并不影响文件同步过程。本参数仅在下载文件时，作为判断当前文件是否被同步完成的一个阀值（经验值）# if use a trunk file to store several small files# default value is false# since V3.00use_trunk_file = false# V3.0引入的参数。是否使用小文件合并存储特性，缺省是关闭的。# the min slot size, should &lt;= 4KB# default value is 256 bytes# since V3.00slot_min_size = 256# V3.0引入的参数。# trunk file分配的最小字节数。比如文件只有16个字节，系统也会分配slot_min_size个字节。# the max slot size, should &gt; slot_min_size# store the upload file to trunk file when it&apos;s size &lt;=  this value# default value is 16MB# since V3.00slot_max_size = 16MB# V3.0引入的参数。# 只有文件大小&lt;=这个参数值的文件，才会合并存储。如果一个文件的大小大于这个参数值，将直接保存到一个文件中（即不采用合并存储方式）。# the trunk file size, should &gt;= 4MB# default value is 64MB# since V3.00trunk_file_size = 64MB# V3.0引入的参数。# 合并存储的trunk file大小，至少4MB，缺省值是64MB。不建议设置得过大。# if create trunk file advancely# default value is falsetrunk_create_file_advance = false# 是否提前创建trunk file。只有当这个参数为true，下面3个以trunk_create_file_打头的参数才有效。# the time base to create trunk file# the time format: HH:MM# default value is 02:00trunk_create_file_time_base = 02:00# 提前创建trunk file的起始时间点（基准时间），02:00表示第一次创建的时间点是凌晨2点。# the interval of create trunk file, unit: second# default value is 38400 (one day)trunk_create_file_interval = 86400# 创建trunk file的时间间隔，单位为秒。如果每天只提前创建一次，则设置为86400# the threshold to create trunk file# when the free trunk file size less than the threshold, will create # the trunk files# default value is 0trunk_create_file_space_threshold = 20G# 提前创建trunk file时，需要达到的空闲trunk大小# 比如本参数为20G，而当前空闲trunk为4GB，那么只需要创建16GB的trunk file即可。# if check trunk space occupying when loading trunk free spaces# the occupied spaces will be ignored# default value is false# since V3.09# NOTICE: set this parameter to true will slow the loading of trunk spaces# when startup. you should set this parameter to true when neccessary.trunk_init_check_occupying = false#trunk初始化时，是否检查可用空间是否被占用# if ignore storage_trunk.dat, reload from trunk binlog# default value is false# since V3.10# set to true once for version upgrade when your version less than V3.10trunk_init_reload_from_binlog = false# 是否无条件从trunk binlog中加载trunk可用空间信息# FastDFS缺省是从快照文件storage_trunk.dat中加载trunk可用空间，# 该文件的第一行记录的是trunk binlog的offset，然后从binlog的offset开始加载# if use storage ID instead of IP address# default value is false# since V4.00use_storage_id = false# 是否使用server ID作为storage server标识# specify storage ids filename, can use relative or absolute path# since V4.00storage_ids_filename = storage_ids.conf# use_storage_id 设置为true，才需要设置本参数# 在文件中设置组名、server ID和对应的IP地址，参见源码目录下的配置示例：conf/storage_ids.conf# if store slave file use symbol link# default value is false# since V4.01store_slave_file_use_link = false# 存储从文件是否采用symbol link（符号链接）方式# 如果设置为true，一个从文件将占用两个文件：原始文件及指向它的符号链接。# if rotate the error log every day# default value is false# since V4.02rotate_error_log = false# 是否定期轮转error log，目前仅支持一天轮转一次# rotate error log time base, time format: Hour:Minute# Hour from 0 to 23, Minute from 0 to 59# default value is 00:00# since V4.02error_log_rotate_time=00:00# error log定期轮转的时间点，只有当rotate_error_log设置为true时有效# rotate error log when the log file exceeds this size# 0 means never rotates log file by log file size# default value is 0# since V4.02rotate_error_log_size = 0# error log按大小轮转# 设置为0表示不按文件大小轮转，否则当error log达到该大小，就会轮转到新文件中# 以下是关于http的设置了 默认编译是不生效的 要求更改 #WITH_HTTPD=1 将 注释#去掉 再编译# 关于http的应用 说实话 不是很了解 没有见到 相关说明 ,望 版主可以完善一下 以下是字面解释了#HTTP settingshttp.disabled=false   # HTTP服务是否不生效 http.server_port=8080  # HTTP服务端口#use &quot;#include&quot; directive to include http other settiongs##include http.conf  # 如果加载http.conf的配置文件 去掉第一个#哈哈 完成了一个 下面是 storage.conf# is this config file disabled# false for enabled# true for disableddisabled=false  #同上文了 就不多说了# the name of the group this storage server belongs togroup_name=group1# 指定 此 storage server 所在 组(卷)# bind an address of this host# empty for bind all addresses of this hostbind_addr=# 同上文# if bind an address of this host when connect to other servers # (this storage server as a client)# true for binding the address configed by above parameter: &quot;bind_addr&quot;# false for binding any address of this hostclient_bind=true# bind_addr通常是针对server的。当指定bind_addr时，本参数才有效。# 本storage server作为client连接其他服务器（如tracker server、其他storage server），是否绑定bind_addr。# the storage server portport=23000#  storage server服务端口# connect timeout in seconds# default value is 30sconnect_timeout=30#连接超时时间，针对socket套接字函数connect# network timeout in secondsnetwork_timeout=60#  storage server 网络超时时间，单位为秒。发送或接收数据时，如果在超时时间后还不能发送或接收数据，则本次网络通信失败。# heart beat interval in secondsheart_beat_interval=30# 心跳间隔时间，单位为秒 (这里是指主动向tracker server 发送心跳)# disk usage report interval in secondsstat_report_interval=60# storage server向tracker server报告磁盘剩余空间的时间间隔，单位为秒。# the base path to store data and log filesbase_path=/home/yuqing/fastdfs# base_path 目录地址,根目录必须存在  子目录会自动生成 (注 :这里不是上传的文件存放的地址,之前是的,在某个版本后更改了)# 目录结构 因为 版主没有更新到 论谈上 这里就不发了 大家可以看一下置顶贴:# max concurrent connections server supported# max_connections worker threads start when this service startupmax_connections=256# 同上文# work thread count, should &lt;= max_connections# default value is 4# since V2.00# V2.0引入的这个参数，工作线程数，通常设置为CPU数work_threads=4# the buff size to recv / send data# default value is 64KB# since V2.00buff_size = 256KB# V2.0引入本参数。设置队列结点的buffer大小。工作队列消耗的内存大小 = buff_size * max_connections# 设置得大一些，系统整体性能会有所提升。# 消耗的内存请不要超过系统物理内存大小。另外，对于32位系统，请注意使用到的内存不要超过3GB# if read / write file directly# if set to true, open file will add the O_DIRECT flag to avoid file caching# by the file system. be careful to set this parameter.# default value is falsedisk_rw_direct = false# V2.09引入本参数。设置为true，表示不使用操作系统的文件内容缓冲特性。# 如果文件数量很多，且访问很分散，可以考虑将本参数设置为true# if disk read / write separated##  false for mixed read and write##  true for separated read and write# default value is true# since V2.00disk_rw_separated = true# V2.0引入本参数。磁盘IO读写是否分离，缺省是分离的。# disk reader thread count per store base path# for mixed read / write, this parameter can be 0# default value is 1# since V2.00disk_reader_threads = 1# V2.0引入本参数。针对单个存储路径的读线程数，缺省值为1。# 读写分离时，系统中的读线程数 = disk_reader_threads * store_path_count# 读写混合时，系统中的读写线程数 = (disk_reader_threads + disk_writer_threads) * store_path_count# disk writer thread count per store base path# for mixed read / write, this parameter can be 0# default value is 1# since V2.00disk_writer_threads = 1# V2.0引入本参数。针对单个存储路径的写线程数，缺省值为1。# 读写分离时，系统中的写线程数 = disk_writer_threads * store_path_count# 读写混合时，系统中的读写线程数 = (disk_reader_threads + disk_writer_threads) * store_path_count# when no entry to sync, try read binlog again after X milliseconds# 0 for try again immediately (not need to wait)sync_wait_msec=200# 同步文件时，如果从binlog中没有读到要同步的文件，休眠N毫秒后重新读取。0表示不休眠，立即再次尝试读取。# 出于CPU消耗考虑，不建议设置为0。如何希望同步尽可能快一些，可以将本参数设置得小一些，比如设置为10ms# after sync a file, usleep milliseconds# 0 for sync successively (never call usleep)sync_interval=0# 同步上一个文件后，再同步下一个文件的时间间隔，单位为毫秒，0表示不休眠，直接同步下一个文件。 # sync start time of a day, time format: Hour:Minute# Hour from 0 to 23, Minute from 0 to 59sync_start_time=00:00# sync end time of a day, time format: Hour:Minute# Hour from 0 to 23, Minute from 0 to 59sync_end_time=23:59# 上面二个一起解释。允许系统同步的时间段 (默认是全天) 。一般用于避免高峰同步产生一些问题而设定，相信sa都会明白# write to the mark file after sync N files# default value is 500write_mark_file_freq=500# 同步完N个文件后，把storage的mark文件同步到磁盘# 注：如果mark文件内容没有变化，则不会同步# path(disk or mount point) count, default value is 1store_path_count=1# 存放文件时storage server支持多个路径（例如磁盘）。这里配置存放文件的基路径数目，通常只配一个目录。# store_path#, based 0, if store_path0 not exists, it&apos;s value is base_path# the paths must be existstore_path0=/home/yuqing/fastdfs#store_path1=/home/yuqing/fastdfs2# 逐一配置store_path个路径，索引号基于0。注意配置方法后面有0,1,2 ......，需要配置0到store_path - 1。# 如果不配置base_path0，那边它就和base_path对应的路径一样。# subdir_count  * subdir_count directories will be auto created under each # store_path (disk), value can be 1 to 256, default value is 256subdir_count_per_path=256# FastDFS存储文件时，采用了两级目录。这里配置存放文件的目录个数 (系统的存储机制,大家看看文件存储的目录就知道了)# 如果本参数只为N（如：256），那么storage server在初次运行时，会自动创建 N * N 个存放文件的子目录。# tracker_server can ocur more than once, and tracker_server format is#  &quot;host:port&quot;, host can be hostname or ip addresstracker_server=10.62.164.84:22122tracker_server=10.62.245.170:22122# tracker_server 的列表 要写端口的哦 (再次提醒是主动连接tracker_server )# 有多个tracker server时，每个tracker server写一行#standard log level as syslog, case insensitive, value list:### emerg for emergency### alert### crit for critical### error### warn for warning### notice### info### debuglog_level=info# 日志级别不多说#unix group name to run this program, #not set (empty) means run by the group of current userrun_by_group=# 同上文了#unix username to run this program,#not set (empty) means run by current userrun_by_user=# 同上文了 (提醒注意权限 如果和 webserver不搭 可以会产生错误 哦)# allow_hosts can ocur more than once, host can be hostname or ip address,# &quot;*&quot; means match all ip addresses, can use range like this: 10.0.1.[1-15,20] or# host[01-08,20-25].domain.com, for example:# allow_hosts=10.0.1.[1-15,20]# allow_hosts=host[01-08,20-25].domain.comallow_hosts=*# 允许连接本storage server的IP地址列表 （不包括自带HTTP服务的所有连接）# 可以配置多行，每行都会起作用# the mode of the files distributed to the data path # 0: round robin(default)# 1: random, distributted by hash codefile_distribute_path_mode=0#  文件在data目录下分散存储策略。# 0: 轮流存放，在一个目录下存储设置的文件数后（参数file_distribute_rotate_count中设置文件数），使用下一个目录进行存储。# 1: 随机存储，根据文件名对应的hash code来分散存储。# valid when file_distribute_to_path is set to 0 (round robin), # when the written file count reaches this number, then rotate to next path# default value is 100file_distribute_rotate_count=100   # 当上面的参数file_distribute_path_mode配置为0（轮流存放方式）时，本参数有效。# 当一个目录下的文件存放的文件数达到本参数值时，后续上传的文件存储到下一个目录中。# call fsync to disk when write big file# 0: never call fsync# other: call fsync when written bytes &gt;= this bytes# default value is 0 (never call fsync)fsync_after_written_bytes=0# 当写入大文件时，每写入N个字节，调用一次系统函数fsync将内容强行同步到硬盘。0表示从不调用fsync  # sync log buff to disk every interval seconds# default value is 10 secondssync_log_buff_interval=10# 同步或刷新日志信息到硬盘的时间间隔，单位为秒# 注意：storage server 的日志信息不是时时写硬盘的，而是先写内存。# sync binlog buff / cache to disk every interval seconds# this parameter is valid when write_to_binlog set to 1# default value is 60 secondssync_binlog_buff_interval=60# 同步binglog（更新操作日志）到硬盘的时间间隔，单位为秒# 本参数会影响新上传文件同步延迟时间# sync storage stat info to disk every interval seconds# default value is 300 secondssync_stat_file_interval=300# 把storage的stat文件同步到磁盘的时间间隔，单位为秒。# 注：如果stat文件内容没有变化，不会进行同步# thread stack size, should &gt;= 512KB# default value is 512KBthread_stack_size=512KB# 线程栈的大小。FastDFS server端采用了线程方式。# 对于V1.x，storage server线程栈不应小于512KB；对于V2.0，线程栈大于等于128KB即可。# 线程栈越大，一个线程占用的系统资源就越多。# 对于V1.x，如果要启动更多的线程（max_connections），可以适当降低本参数值。# the priority as a source server for uploading file.# the lower this value, the higher its uploading priority.# default value is 10upload_priority=10#  本storage server作为源服务器，上传文件的优先级，可以为负数。值越小，优先级越高。这里就和 tracker.conf 中store_server= 2时的配置相对应了 # if check file duplicate, when set to true, use FastDHT to store file indexes# 1 or yes: need check# 0 or no: do not check# default value is 0check_file_duplicate=0# 是否检测上传文件已经存在。如果已经存在，则不存在文件内容，建立一个符号链接以节省磁盘空间。 # 这个应用要配合FastDHT 使用，所以打开前要先安装FastDHT # 1或yes 是检测，0或no 是不检测# file signature method for check file duplicate## hash: four 32 bits hash code## md5: MD5 signature# default value is hash# since V4.01file_signature_method=hash# 文件去重时，文件内容的签名方式：## hash： 4个hash code## md5：MD5# namespace for storing file indexes (key-value pairs)# this item must be set when check_file_duplicate is true / onkey_namespace=FastDFS# 当上个参数设定为1 或 yes时 (true/on也是可以的) ， 在FastDHT中的命名空间。# set keep_alive to 1 to enable persistent connection with FastDHT servers# default value is 0 (short connection)keep_alive=0# 与FastDHT servers 的连接方式 (是否为持久连接) ，默认是0（短连接方式）。可以考虑使用长连接，这要看FastDHT server的连接数是否够用。# 下面是关于FastDHT servers 的设定 需要对FastDHT servers 有所了解,这里只说字面意思了# you can use &quot;#include filename&quot; (not include double quotes) directive to # load FastDHT server list, when the filename is a relative path such as # pure filename, the base path is the base path of current/this config file.# must set FastDHT server list when check_file_duplicate is true / on# please see INSTALL of FastDHT for detail##include /home/yuqing/fastdht/conf/fdht_servers.conf# 可以通过 #include filename 方式来加载 FastDHT servers  的配置，装上FastDHT就知道该如何配置啦。# 同样要求 check_file_duplicate=1 时才有用，不然系统会忽略# fdht_servers.conf 记载的是 FastDHT servers 列表 # if log to access log# default value is false# since V4.00use_access_log = false# 是否将文件操作记录到access log# if rotate the access log every day# default value is false# since V4.00rotate_access_log = false# 是否定期轮转access log，目前仅支持一天轮转一次# rotate access log time base, time format: Hour:Minute# Hour from 0 to 23, Minute from 0 to 59# default value is 00:00# since V4.00access_log_rotate_time=00:00# access log定期轮转的时间点，只有当rotate_access_log设置为true时有效# if rotate the error log every day# default value is false# since V4.02rotate_error_log = false# 是否定期轮转error log，目前仅支持一天轮转一次# rotate error log time base, time format: Hour:Minute# Hour from 0 to 23, Minute from 0 to 59# default value is 00:00# since V4.02error_log_rotate_time=00:00# error log定期轮转的时间点，只有当rotate_error_log设置为true时有效# rotate access log when the log file exceeds this size# 0 means never rotates log file by log file size# default value is 0# since V4.02rotate_access_log_size = 0# access log按文件大小轮转# 设置为0表示不按文件大小轮转，否则当access log达到该大小，就会轮转到新文件中# rotate error log when the log file exceeds this size# 0 means never rotates log file by log file size# default value is 0# since V4.02rotate_error_log_size = 0# error log按文件大小轮转# 设置为0表示不按文件大小轮转，否则当error log达到该大小，就会轮转到新文件中# if skip the invalid record when sync file# default value is false# since V4.02file_sync_skip_invalid_record=false# 文件同步的时候，是否忽略无效的binlog记录下面是http的配置了。如果系统较大，这个服务有可能支持不了，可以自行换一个webserver，我喜欢lighttpd，当然ng也很好了。具体不说明了。相应这一块的说明大家都懂，不明白见上文。#HTTP settingshttp.disabled=false# the port of the web server on this storage serverhttp.server_port=8888http.trunk_size=256KB# http.trunk_size表示读取文件内容的buffer大小（一次读取的文件内容大小），也就是回复给HTTP client的块大小。# use the ip address of this storage server if domain_name is empty,# else this domain name will ocur in the url redirected by the tracker serverhttp.domain_name=# storage server上web server域名，通常仅针对单独部署的web server。这样URL中就可以通过域名方式来访问storage server上的文件了，# 这个参数为空就是IP地址的方式。#use &quot;#include&quot; directive to include HTTP other settiongs##include http.conf</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test 外网是否被墙</title>
      <link href="/2018/11/06/Test-%E5%A4%96%E7%BD%91%E6%98%AF%E5%90%A6%E8%A2%AB%E5%A2%99/"/>
      <url>/2018/11/06/Test-%E5%A4%96%E7%BD%91%E6%98%AF%E5%90%A6%E8%A2%AB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27580343&auto=1&height=66"></iframe><blockquote><p>本篇用于测试外网Ip是否被墙。</p></blockquote><h4 id="1-全国-Ping-测试网页-https-www-ipip-net-ping-php"><a href="#1-全国-Ping-测试网页-https-www-ipip-net-ping-php" class="headerlink" title="1. 全国 Ping 测试网页(https://www.ipip.net/ping.php)"></a>1. 全国 Ping 测试网页(<a href="https://www.ipip.net/ping.php" target="_blank" rel="noopener">https://www.ipip.net/ping.php</a>)</h4><p>如下图，输入ip之后点击ping，如果丢包率 100%，那肯定是被 Q 了，这种情况只能删除机器重建了。反之，那也不一定说明没有被 Q，接下来用下面两步继续检测。<br><img src="/2018/11/06/Test-外网是否被墙/001.png" title="ping测试"></p><h4 id="2-国内外端口扫描测试-http-tool-chinaz-com-port"><a href="#2-国内外端口扫描测试-http-tool-chinaz-com-port" class="headerlink" title="2. 国内外端口扫描测试(http://tool.chinaz.com/port)"></a>2. 国内外端口扫描测试(<a href="http://tool.chinaz.com/port" target="_blank" rel="noopener">http://tool.chinaz.com/port</a>)</h4><p>如果出现下面情况，说明在国内该 IP 已经被封掉了，试试下一步去国外检测端口是否可用。<br><img src="/2018/11/06/Test-外网是否被墙/002.png" title="ping测试"><br>如果出现下面情况，说明国内并没有封掉该 IP。<br><img src="/2018/11/06/Test-外网是否被墙/003.png" title="ping测试"></p><h4 id="3-国外测试-https-www-yougetsignal-com-tools-open-ports"><a href="#3-国外测试-https-www-yougetsignal-com-tools-open-ports" class="headerlink" title="3. 国外测试(https://www.yougetsignal.com/tools/open-ports/)"></a>3. 国外测试(<a href="https://www.yougetsignal.com/tools/open-ports/" target="_blank" rel="noopener">https://www.yougetsignal.com/tools/open-ports/</a>)</h4><img src="/2018/11/06/Test-外网是否被墙/004.png" title="ping测试"><ul><li>如果上一步 22 端口是关闭状态，在这边检测是 open 状态，说明 IP 肯定是被封掉了，只能删除机器重建。</li><li>如果上一步 22 店口是关闭状态，这边检测也是 close 状态，那就要查看是不是服务器的防火墙把端口限制了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vultr 搭建 VPS 外网ssr服务器</title>
      <link href="/2018/11/06/Vultr-%E6%90%AD%E5%BB%BA-VPS%E5%A4%96%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/11/06/Vultr-%E6%90%AD%E5%BB%BA-VPS%E5%A4%96%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25714146&auto=1&height=66"></iframe><blockquote><p>搭建自己的shadowsocks代理服务器实现科学上网。内容包括VPS购买，连接VPS，一键搭建shadowsocks，开启bbr加速，客户端配置shaodowsocks。</p></blockquote><h4 id="1-购买VPS"><a href="#1-购买VPS" class="headerlink" title="1. 购买VPS"></a>1. 购买VPS</h4><p>VPS（Virtual private server，虚拟专用服务器），个人用来搭建一些博客，跑跑脚本足够了。今天的教程就用VPS来搭建属于自己的shaodowsocks，一个人独占一条线路。</p><p>Vultr是美国的一个VPS服务商。</p><h5 id="1-1-新用户注册"><a href="#1-1-新用户注册" class="headerlink" title="1.1 新用户注册"></a>1.1 新用户注册</h5><p>优惠注册链接：<a href="http://www.vultr.com" target="_blank" rel="noopener">www.vultr.com</a><br><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/001.png" title="注册"></p><h5 id="1-2-充值。"><a href="#1-2-充值。" class="headerlink" title="1.2 充值。"></a>1.2 充值。</h5><p>因为Vultr是按小时收费的。先充值才可以用。<br>验证并登录后我们会跳转到充值界面，或者从Billing-&gt;Make Patment进入：<br><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/002.png" title="充值"></p><p>支持支付宝，微信等，很方便，充值10刀，按小时扣费，只要保证账户有余额，你的服务器就会一直运行。</p><h5 id="1-3-购买服务器"><a href="#1-3-购买服务器" class="headerlink" title="1.3 购买服务器"></a>1.3 购买服务器</h5><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/003.png" title="购买服务器"><p>由于2.5刀的没有ipv4。所以我直接购买的3.5刀每月的。<br><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/004.png" title="购买服务器选择"><br>点击开启ipv6。然后Deploy Now 就可以了。<br><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/005.png" title="购买服务器"></p><h5 id="1-4-获取VPS登录信息"><a href="#1-4-获取VPS登录信息" class="headerlink" title="1.4 获取VPS登录信息"></a>1.4 获取VPS登录信息</h5><p>选择Deploy后，过个几分钟，就可以看到自己的服务器信息了，具体位置在Servers-&gt;Instances，点击选择你新建的实例：</p><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/006.png" title="获取登录信息"><h4 id="2-连接VPS"><a href="#2-连接VPS" class="headerlink" title="2. 连接VPS"></a>2. 连接VPS</h4><p>这时候开始连接我们的VPS。</p><h5 id="2-1-开启防火墙端口"><a href="#2-1-开启防火墙端口" class="headerlink" title="2.1 开启防火墙端口"></a>2.1 开启防火墙端口</h5><p>这个和咱们国内的云服务器差不多。<br>点击菜单  Servers &gt;&gt; Firewall &gt;&gt; Add Firewall Group &gt;&gt; 输入描述 &gt;&gt; 编辑ipv4 规则。 &gt;&gt; Linked Instances &gt;&gt; 选择我们新建的vps。</p><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/007.png" title="防火墙信息"><h5 id="2-2-测试是否被墙。"><a href="#2-2-测试是否被墙。" class="headerlink" title="2.2 测试是否被墙。"></a>2.2 测试是否被墙。</h5><p>站内地址：<a href="/2018/11/06/Test-外网是否被墙/" title="Test 外网是否被墙">Test 外网是否被墙</a></p><h5 id="2-3-Windows-Xshell-连接。"><a href="#2-3-Windows-Xshell-连接。" class="headerlink" title="2.3 Windows Xshell 连接。"></a>2.3 Windows Xshell 连接。</h5><p>在Servers Information 中。有ip 和 账号信息。直接连接就可以。</p><h4 id="3-一键搭建shaodowsocks"><a href="#3-一键搭建shaodowsocks" class="headerlink" title="3. 一键搭建shaodowsocks"></a>3. 一键搭建shaodowsocks</h4><h5 id="3-1-下载一键搭建ss脚本文件（直接复制这段代码运行即可）"><a href="#3-1-下载一键搭建ss脚本文件（直接复制这段代码运行即可）" class="headerlink" title="3.1 下载一键搭建ss脚本文件（直接复制这段代码运行即可）"></a>3.1 下载一键搭建ss脚本文件（直接复制这段代码运行即可）</h5><pre><code>git clone https://github.com/flyzy2005/ss-fly</code></pre><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/009.png" title="下载git代码"><p>如果提示 <code>bash: git: command not found</code>，则先安装git：<code>yum install git -y</code></p><h5 id="3-2-运行搭建ssr脚本代码"><a href="#3-2-运行搭建ssr脚本代码" class="headerlink" title="3.2 运行搭建ssr脚本代码"></a>3.2 运行搭建ssr脚本代码</h5><p>听说ssr是改进版本，可以伪装成自定义的http开头，让监控着认为你是在访问百度，将实际的内容进行加密。SS是纯加密流量。所以直接搭建ssr。</p><pre><code>ss-fly/ss-fly.sh -i flyzy2005.com 1024</code></pre><h5 id="3-3-输入对应的参数"><a href="#3-3-输入对应的参数" class="headerlink" title="3.3 输入对应的参数"></a>3.3 输入对应的参数</h5><pre><code>密码：flyzy2005.com端口：1024</code></pre><p>全部选择结束后，会看到如下界面，就说明搭建ssr成功了：</p><pre><code>Congratulations, ShadowsocksR server install completed!Your Server IP        :你的服务器ipYour Server Port      :你的端口Your Password         :你的密码Your Protocol         :你的协议</code></pre><h5 id="3-4-相关操作命令"><a href="#3-4-相关操作命令" class="headerlink" title="3.4 相关操作命令"></a>3.4 相关操作命令</h5><pre><code>修改配置文件：vim /etc/shadowsocks.json停止ss服务：ssserver -c /etc/shadowsocks.json -d stop启动ss服务：ssserver -c /etc/shadowsocks.json -d start重启ss服务：ssserver -c /etc/shadowsocks.json -d restart</code></pre><h5 id="3-5-卸载"><a href="#3-5-卸载" class="headerlink" title="3.5 卸载"></a>3.5 卸载</h5><pre><code>ss-fly/ss-fly.sh -uninstall</code></pre><h4 id="4-一键开启BBR加速"><a href="#4-一键开启BBR加速" class="headerlink" title="4. 一键开启BBR加速"></a>4. 一键开启BBR加速</h4><p>BBR是Google开源的一套内核加速算法，可以让你搭建的shadowsocks/shadowsocksR速度上一个台阶，本一键搭建ss/ssr脚本支持一键升级最新版本的内核并开启BBR加速。</p><p>BBR支持4.9以上的，如果低于这个版本则会自动下载最新内容版本的内核后开启BBR加速并重启，如果高于4.9以上则自动开启BBR加速，执行如下脚本命令即可自动开启BBR加速：</p><pre><code>ss-fly/ss-fly.sh -bbr</code></pre><img src="/2018/11/06/Vultr-搭建-VPS外网服务器/010.png" title="bbr安装成功"><h5 id="4-1-判断bbr加速是否成功"><a href="#4-1-判断bbr加速是否成功" class="headerlink" title="4.1 判断bbr加速是否成功"></a>4.1 判断bbr加速是否成功</h5><p>判断BBR加速有没有开启成功。输入以下命令：</p><pre><code>sysctl net.ipv4.tcp_available_congestion_control</code></pre><p>如果返回值为：</p><pre><code>net.ipv4.tcp_available_congestion_control = bbr cubic reno</code></pre><p>后面有bbr，则说明已经开启成功了。</p><h4 id="5-启动"><a href="#5-启动" class="headerlink" title="5. 启动"></a>5. 启动</h4><ul><li>有两种启动方式，建议使用配置文件的方式启动</li></ul><p>执行<code>vim /etc/shadowsocks.json</code> 添加如下内容：</p><p>多用户配置如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line"> "server":"0.0.0.0"，  </span><br><span class="line"> "local_address": "127.0.0.1",  </span><br><span class="line"> "local_port":1080,  </span><br><span class="line">  "port_password": &#123;  </span><br><span class="line">     "8388": "password",  </span><br><span class="line">     "8387": "password",  </span><br><span class="line">     "8386": "password",  </span><br><span class="line">     "8385": "password"  </span><br><span class="line"> &#125;,  </span><br><span class="line"> "timeout":300,  </span><br><span class="line"> "method":"rc4-md5",  </span><br><span class="line"> "fast_open": false  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后通过执行一下命令启动：</p><pre><code>ssserver -c /etc/shadowsocks.json -d start如果要停止运行，将命令中的start改成stop。</code></pre><p>TIPS: 加密方式推荐使用rc4-md5，因为 RC4 比 AES 速度快好几倍，如果用在路由器上会带来显著性能提升。旧的 RC4 加密之所以不安全是因为 Shadowsocks 在每个连接上重复使用 key，没有使用 IV。现在已经重新正确实现，可以放心使用。更多可以看 issue。</p><h4 id="6-开机自启"><a href="#6-开机自启" class="headerlink" title="6.开机自启"></a>6.开机自启</h4><p>编辑一下/etc/supervisord.conf文件，命令如下：<br><code>vim /etc/supervisord.conf</code></p><p>把下面的内容粘贴到文件尾部的空行处，然后保存：</p><pre><code>[program:shadowsocks]command=ssserver -c /etc/shadowsocks.jsonautostart=trueautorestart=trueuser=rootlog_stderr=truelogfile=/var/log/shadowsocks.log</code></pre><p>接下来需要编辑一下/etc/rc.local文件，请执行以下命令：</p><pre><code>vi /etc/rc.local</code></pre><p>请把以下内容粘贴到文件中部的空白处，然后保存</p><pre><code>service supervisord start</code></pre><p>完成以上步骤后，重启之后，shadowsock会自动运行。</p>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群搭建</title>
      <link href="/2018/10/26/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/10/26/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装搭建集群所需要的环境。"><a href="#1-安装搭建集群所需要的环境。" class="headerlink" title="1. 安装搭建集群所需要的环境。"></a>1. 安装搭建集群所需要的环境。</h4><pre><code>命令行运行：     yum -y install gcc psmisc</code></pre><h4 id="2-下载redis-安装文件-并解压。"><a href="#2-下载redis-安装文件-并解压。" class="headerlink" title="2. 下载redis 安装文件 并解压。"></a>2. 下载redis 安装文件 并解压。</h4><pre><code>wget http://download.redis.io/releases/redis-4.0.1.tar.gztar -zxvf 文件名。</code></pre><h4 id="3-进入解压好的文件目录，安装。"><a href="#3-进入解压好的文件目录，安装。" class="headerlink" title="3. 进入解压好的文件目录，安装。"></a>3. 进入解压好的文件目录，安装。</h4><pre><code>make MALLOC=libcmake &amp; make install</code></pre><ul><li>如果运行make报错，可能如下：</li><li>gcc依赖：yum install gcc gcc-c++ ncurses-devel</li><li>cd deps下。执行。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make hiredis</span><br><span class="line">make jemalloc</span><br><span class="line">make lua</span><br><span class="line">make linenoise</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-搭建集群-—-创建集群所需目录"><a href="#4-搭建集群-—-创建集群所需目录" class="headerlink" title="4. 搭建集群 — 创建集群所需目录"></a>4. 搭建集群 — 创建集群所需目录</h4><pre><code>cd /usr/localmkdir redis-clustercd redis-clustermkdir 7001 7002 7003 7004 7005 7006</code></pre><h4 id="5-搭建集群-—-修改配置文件"><a href="#5-搭建集群-—-修改配置文件" class="headerlink" title="5. 搭建集群 — 修改配置文件"></a>5. 搭建集群 — 修改配置文件</h4><pre><code>cp /usr/local/redis-4.0.1/redis.conf 7001/vim 7001/redis.conf修改配置文件的选项如下    port 7001    daemonize yes    bind 127.0.0.1 注释掉    protected-mode yes  改为  no    如果yes 不允许外网访问。    pidfile  /var/run/redis_7001.pid    cluster-enabled yes    cluster-config-file nodes-7001.conf    cluster-node-timeout  15000               //请求超时  默认15秒，可自行设置    appendonly  yes如果要加密码的话：    masterauth 你的密码    requirepass 你的密码修改完成一个之后，复制7001下的文件到其他五个文件夹。    cp 7001/redis.conf 7002/    cp 7001/redis.conf 7003/    cp 7001/redis.conf 7004/    cp 7001/redis.conf 7005/    cp 7001/redis.conf 7006/然后全文搜索修改端口号就行。    vim 7002/redis.conf    :%s/7001/7002/g    改五次。</code></pre><h4 id="6-搭建集群-—-安装集群所需的依赖环境。"><a href="#6-搭建集群-—-安装集群所需的依赖环境。" class="headerlink" title="6. 搭建集群 — 安装集群所需的依赖环境。"></a>6. 搭建集群 — 安装集群所需的依赖环境。</h4><pre><code>yum -y install ruby rubygemsgem install redis如果提示： redis requires Ruby version &gt;= 2.2.2.CentOS7 yum库中ruby的版本支持到 2.0.0,可gem 安装redis需要最低是2.2.2,自己编译的ruby源码。解决方法如下：    yum -y install curl    curl -L get.rvm.io | bash -s stable    find / -name rvm -print    source /usr/local/rvm/scripts/rvm    rvm list known    rvm install 2.4.1    rvm use 2.4.1    rvm use 2.4.1 --default    rvm remove 2.0.0    ruby --version如果不成功，百度搜升级ruby。    gem install redis</code></pre><h4 id="7-如果加了密码，修改client-rb文件。"><a href="#7-如果加了密码，修改client-rb文件。" class="headerlink" title="7. 如果加了密码，修改client.rb文件。"></a>7. 如果加了密码，修改client.rb文件。</h4><pre><code>find / -name client.rb找到路径中包含redis版本号那个。vim 文件。</code></pre><img src="/2018/10/26/Redis集群搭建/001.png" title="修改连接密码"><h4 id="8-批处理文件启动redis。"><a href="#8-批处理文件启动redis。" class="headerlink" title="8. 批处理文件启动redis。"></a>8. 批处理文件启动redis。</h4><pre><code>vim redis-start.sh</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis-cluster/7001/</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd /usr/local/redis-cluster/7002/</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd /usr/local/redis-cluster/7003/</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd /usr/local/redis-cluster/7004/</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd /usr/local/redis-cluster/7005/</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd /usr/local/redis-cluster/7006/</span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><pre><code>chmod +x redis-start.shvim redis-remove.sh</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis-cluster/7001/</span><br><span class="line">rm -rf appendonly.aof</span><br><span class="line">rm -rf nodes-7001.conf</span><br><span class="line">cd /usr/local/redis-cluster/7002/</span><br><span class="line">rm -rf appendonly.aof</span><br><span class="line">rm -rf nodes-7002.conf</span><br><span class="line">cd /usr/local/redis-cluster/7003/</span><br><span class="line">rm -rf appendonly.aof</span><br><span class="line">rm -rf nodes-7003.conf</span><br><span class="line">cd /usr/local/redis-cluster/7004/</span><br><span class="line">rm -rf appendonly.aof</span><br><span class="line">rm -rf nodes-7004.conf</span><br><span class="line">cd /usr/local/redis-cluster/7005/</span><br><span class="line">rm -rf appendonly.aof</span><br><span class="line">rm -rf nodes-7005.conf</span><br><span class="line">cd /usr/local/redis-cluster/7006/</span><br><span class="line">rm -rf appendonly.aof</span><br><span class="line">rm -rf nodes-7006.conf</span><br></pre></td></tr></table></figure><pre><code>chmod +x redis-remove.sh</code></pre><h4 id="9-集群搭建，启动集群"><a href="#9-集群搭建，启动集群" class="headerlink" title="9. 集群搭建，启动集群"></a>9. 集群搭建，启动集群</h4><pre><code>./redis-start.sh如果是云服务器，先放开端口 7001-7006  和 17001-17006./redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006将127.0.0.1 改成你的ip</code></pre>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread JDK1.5</title>
      <link href="/2018/10/24/Thread/"/>
      <url>/2018/10/24/Thread/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25862794&auto=1&height=66"></iframe><h3 id="一、Java5-前时代"><a href="#一、Java5-前时代" class="headerlink" title="一、Java5 前时代"></a>一、Java5 前时代</h3><h4 id="1-并发实现（两种）"><a href="#1-并发实现（两种）" class="headerlink" title="1. 并发实现（两种）"></a>1. 并发实现（两种）</h4><blockquote><p>Java Green Thread (模拟线程实现方式。)</p></blockquote><blockquote><p>Java Native Thread</p></blockquote><h4 id="2-局限性"><a href="#2-局限性" class="headerlink" title="2. 局限性"></a>2. 局限性</h4><pre><code>缺少线程管理的支持。（线程池）缺少“锁”API。缺少执行完成的状态。执行结果获取困难。Double Check locking 不确定性。</code></pre><h4 id="3-Code-例子"><a href="#3-Code-例子" class="headerlink" title="3. Code 例子"></a>3. Code 例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * synchronized 关键字是是一种编程语言修饰符。</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">"[Thread : %s] Hello , World... \n"</span>,Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"Sub"</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.printf(<span class="string">"[Thread : %s] Starting......\n"</span>,Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可完成的&#123;<span class="doctag">@link</span> Runnable&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yangkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-10-24-12:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompletableRunnableMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CompletableRunnable completableRunnable = <span class="keyword">new</span> CompletableRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(completableRunnable, <span class="string">"Sub"</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Waits for this thread to die.</span></span><br><span class="line"><span class="comment">         * 等着线程执行结束。串行操作。</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        thread.join();</span><br><span class="line">        System.out.printf(<span class="string">"[Thread : %s] Starting......\n"</span>, Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"running is completed .....: %s\n"</span>, completableRunnable.isCompleted());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CompletableRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> completed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">"[Thread : %s] Hello , World... \n"</span>, Thread.currentThread().getName());</span><br><span class="line">            completed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> completed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql57 rpm 安装</title>
      <link href="/2018/10/22/Mysql57-rpm-%E5%AE%89%E8%A3%85/"/>
      <url>/2018/10/22/Mysql57-rpm-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=546279760&auto=1&height=66"></iframe><h4 id="1-下载和安装mysql源"><a href="#1-下载和安装mysql源" class="headerlink" title="1.下载和安装mysql源"></a>1.下载和安装mysql源</h4><p>先下载 mysql源安装包<br>wget <a href="https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm" target="_blank" rel="noopener">https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</a><br>-bash: wget: 未找到命令<br>我们先安装下wget<br>yum -y install wget<br>然后执行 wget <a href="https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm" target="_blank" rel="noopener">https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</a></p><p>安装本地mysql源<br>yum -y localinstall mysql57-community-release-el7-11.noarch.rpm</p><h4 id="2-在线安装Mysql"><a href="#2-在线安装Mysql" class="headerlink" title="2.在线安装Mysql"></a>2.在线安装Mysql</h4><p>yum -y install mysql-community-server<br>下载的东西比较多 要稍微等会；</p><h4 id="3-启动Mysql服务"><a href="#3-启动Mysql服务" class="headerlink" title="3.启动Mysql服务"></a>3.启动Mysql服务</h4><p>systemctl start mysqld</p><h4 id="4-设置开机启动"><a href="#4-设置开机启动" class="headerlink" title="4.设置开机启动"></a>4.设置开机启动</h4><p>systemctl enable mysqld<br>systemctl daemon-reload</p><h4 id="5-修改root本地登录密码"><a href="#5-修改root本地登录密码" class="headerlink" title="5.修改root本地登录密码"></a>5.修改root本地登录密码</h4><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个临时的默认密码。<br>vi /var/log/mysqld.log<br><img src="/2018/10/22/Mysql57-rpm-安装/001.png" title="找临时密码"><br>[root@localhost ~]#  mysql -u root -p<br>Enter password:<br>输入临时密码 进入mysql命令行；</p><h4 id="6-修改密码。"><a href="#6-修改密码。" class="headerlink" title="6.修改密码。"></a>6.修改密码。</h4><p>首先，修改validate_password_policy参数的值<br>mysql&gt; set global validate_password_policy=0;<br>再修改密码的长度<br>mysql&gt; set global validate_password_length=1;<br>mysql&gt; ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘<strong>**</strong>‘;  自定义密码。<br>Query OK, 0 rows affected (0    .00 sec)</p><h4 id="7-设置允许远程登录"><a href="#7-设置允许远程登录" class="headerlink" title="7.设置允许远程登录"></a>7.设置允许远程登录</h4><p>Mysql默认不允许远程登录，我们需要设置下，并且防火墙开放3306端口；<br>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘Pingan369@’ WITH GRANT OPTION;<br>Query OK, 0 rows affected, 1 warning (0.01 sec)<br>mysql&gt; exit;</p><h4 id="8-Mysql57-需要修改sql-mode。"><a href="#8-Mysql57-需要修改sql-mode。" class="headerlink" title="8.Mysql57 需要修改sql_mode。"></a>8.Mysql57 需要修改sql_mode。</h4><pre><code>vi /etc/my.cnf在[mysqld]下面添加如下列：sql_mode=STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code></pre><h4 id="9-重新启动MySQL。"><a href="#9-重新启动MySQL。" class="headerlink" title="9.重新启动MySQL。"></a>9.重新启动MySQL。</h4><p>systemctl restart mysqld</p>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
            <tag> Mysql57 搭建。 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 学习</title>
      <link href="/2018/08/20/Nginx-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/08/20/Nginx-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=543607345&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀系统架构</title>
      <link href="/2018/05/21/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
      <url>/2018/05/21/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=543607345&auto=1&height=66"></iframe><blockquote><p>最近不知如何学习。记录一篇文章，从公众号<code>crossoverJie</code>转载。</p></blockquote><h4 id="1-最终架构图"><a href="#1-最终架构图" class="headerlink" title="1. 最终架构图"></a>1. 最终架构图</h4><img src="/2018/05/21/秒杀系统架构/01.jpg" title="架构图"><p>先简单根据这个图谈下请求的流转，因为后面不管怎么改进这个都是没有变的。</p><ul><li>前端请求进入 <code>web</code> 层，对应的代码就是 <code>controller</code>。</li><li>之后将真正的库存校验、下单等请求发往 <code>Service</code> 层（其中 RPC 调用依然采用的 <code>dubbo</code>，只是更新为最新版本，本次不会过多讨论 dubbo 相关的细节，有兴趣的可以查看 基于dubbo 的分布式架构）。</li><li><code>Service</code> 层再对数据进行落地，下单完成。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetbrains license搭建</title>
      <link href="/2018/05/15/Jetbrains-license%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/05/15/Jetbrains-license%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=410654865&auto=1&height=66"></iframe><h5 id="18-8-30-更新"><a href="#18-8-30-更新" class="headerlink" title="18.8.30 更新"></a>18.8.30 更新</h5><pre><code>该方式已不支持在2018.2.*以上版本。请谨慎升级。</code></pre><blockquote><p>IDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。</p></blockquote><h4 id="ilanyu’s-Blog"><a href="#ilanyu’s-Blog" class="headerlink" title="ilanyu’s Blog"></a>ilanyu’s Blog</h4><p><a href="http://blog.lanyus.com/archives/174.html" target="_blank" rel="noopener">ilanyu’s</a><br>在github有操作方法。或者看本博客。</p><h4 id="初次使用。"><a href="#初次使用。" class="headerlink" title="初次使用。"></a>初次使用。</h4><p>‘wget –no-check-certificate -O install.sh <a href="https://raw.githubusercontent.com/yushangcl/JetbrainsServer/master/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/yushangcl/JetbrainsServer/master/install.sh</a> &amp;&amp; chmod +x install.sh &amp;&amp; bash install.sh’</p><h4 id="再次使用直接运行install-sh就行了。"><a href="#再次使用直接运行install-sh就行了。" class="headerlink" title="再次使用直接运行install.sh就行了。"></a>再次使用直接运行install.sh就行了。</h4><p>可以打开install.sh配置端口和其他项。</p>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 免密钥登录</title>
      <link href="/2018/05/04/SSH-%E5%85%8D%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/"/>
      <url>/2018/05/04/SSH-%E5%85%8D%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=247416&auto=1&height=66"></iframe><h4 id="SSH免密钥登录"><a href="#SSH免密钥登录" class="headerlink" title="SSH免密钥登录"></a>SSH免密钥登录</h4><blockquote><p>A为本地主机(即用于控制其他主机的机器,jenkins服务器) ;</p></blockquote><blockquote><p>B为远程主机(即被控制的机器Server，jenkins运行之后发布项目的服务器), 假如ip为192.168.1.100 ;</p></blockquote><blockquote><p>A和B的系统都是Linux</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在A上的命令:</span><br><span class="line">1、 ssh-keygen -t rsa (连续三次回车,即在本地生成了公钥和私钥,不设置密码)</span><br><span class="line">2、 ssh root@192.168.1.100 &quot;mkdir .ssh;chmod 0700 .ssh&quot; (需要输入密码， 注:必须将.ssh的权限设为700)，如果提示.ssh已经存在，直接ssh root@192.168.1.100  &quot;chmod 0700 .ssh&quot;</span><br><span class="line">3、scp ~/.ssh/id_rsa.pub root@192.168.1.100:.ssh/id_rsa.pub (需要输入密码)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在B上的命令:</span><br><span class="line">4、 touch /root/.ssh/authorized_keys (如果已经存在这个文件, 跳过这条)</span><br><span class="line">5、 chmod 600 ~/.ssh/authorized_keys  (# 注意： 必须将~/.ssh/authorized_keys的权限改为600, 该文件用于保存ssh客户端生成的公钥，可以修改服务器的ssh服务端配置文件/etc/ssh/sshd_config来指定其他文件名）</span><br><span class="line">6、cat /root/.ssh/id_rsa.pub  &gt;&gt; /root/.ssh/authorized_keys (将id_rsa.pub的内容追加到 authorized_keys 中, 注意不要用，否则会清空原有的内容，使其他人无法使用原有的密钥登录)</span><br><span class="line">7、回到A机器:  ssh root@192.168.1.100 (不需要密码, 登录成功)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 自动构建maven项目</title>
      <link href="/2018/05/04/Jenkins-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/05/04/Jenkins-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=247415&auto=1&height=66"></iframe><blockquote><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p></blockquote><h4 id="1-Jenkins安装构建Maven项目时必要的插件。"><a href="#1-Jenkins安装构建Maven项目时必要的插件。" class="headerlink" title="1. Jenkins安装构建Maven项目时必要的插件。"></a>1. Jenkins安装构建Maven项目时必要的插件。</h4><blockquote><p>jenkins 》 系统管理 》 插件管理 》 可选插件 》 输入搜索安装</p></blockquote><p><code>publish over SSH</code> <code>Maven Integration plugin</code></p><h4 id="2-配置项目构建需要的工具。"><a href="#2-配置项目构建需要的工具。" class="headerlink" title="2. 配置项目构建需要的工具。"></a>2. 配置项目构建需要的工具。</h4><blockquote><p>jenkins 》 系统管理 》 全局工具管理</p></blockquote><p>配置jdk   maven   git 路径就可以。</p><img src="/2018/05/04/Jenkins-自动构建maven项目/2.png" title="工具地址"><img src="/2018/05/04/Jenkins-自动构建maven项目/3.png" title="工具地址"><h4 id="3-配置ssh-server信息。用于构建完成执行远程命令。"><a href="#3-配置ssh-server信息。用于构建完成执行远程命令。" class="headerlink" title="3. 配置ssh server信息。用于构建完成执行远程命令。"></a>3. 配置ssh server信息。用于构建完成执行远程命令。</h4><blockquote><p>jenkins 》 系统管理 》 系统设置 》 应该是最底下。直接拉到最底下，如下图配置自己的信息。</p></blockquote><img src="/2018/05/04/Jenkins-自动构建maven项目/6.png" title="配置ssh"><h4 id="4-创建一个新任务。"><a href="#4-创建一个新任务。" class="headerlink" title="4. 创建一个新任务。"></a>4. 创建一个新任务。</h4><img src="/2018/05/04/Jenkins-自动构建maven项目/1.png" title="创建任务"><h4 id="5-配置源码位置。"><a href="#5-配置源码位置。" class="headerlink" title="5. 配置源码位置。"></a>5. 配置源码位置。</h4><img src="/2018/05/04/Jenkins-自动构建maven项目/4.png" title="源码位置"><h4 id="6-构建命令设置。"><a href="#6-构建命令设置。" class="headerlink" title="6. 构建命令设置。"></a>6. 构建命令设置。</h4><img src="/2018/05/04/Jenkins-自动构建maven项目/5.png" title="构建命令"><h4 id="7-配置完成后操作。"><a href="#7-配置完成后操作。" class="headerlink" title="7. 配置完成后操作。"></a>7. 配置完成后操作。</h4><blockquote><p>ssh 免密登录: <a href="/2018/05/04/SSH-免密钥登录/" title="SSH 免密钥登录">SSH 免密钥登录</a> 。</p></blockquote><pre><code>1.先将自己的jar或者war传至远程目录。2.ssh执行command 或者 在远程服务器新建 shell命令文件。直接执行。</code></pre><img src="/2018/05/04/Jenkins-自动构建maven项目/7.png" title="配置"><h4 id="8-扩展——基于webhook实现自动化构建。"><a href="#8-扩展——基于webhook实现自动化构建。" class="headerlink" title="8. 扩展——基于webhook实现自动化构建。"></a>8. 扩展——基于webhook实现自动化构建。</h4><blockquote><p>1.jenkins 搜索并安装插件 : Gogs</p></blockquote><blockquote><p>2.jenkins 任务管理，配置密匙。</p></blockquote><img src="/2018/05/04/Jenkins-自动构建maven项目/8.png" title="配置">    <blockquote><p>3.gogs配置web钩子。 </p></blockquote><img src="/2018/05/04/Jenkins-自动构建maven项目/9.png" title="配置"> ]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
            <tag> Jenkins 使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins使用</title>
      <link href="/2018/04/18/Jenkins%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/04/18/Jenkins%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25638632&auto=1&height=66"></iframe><br>大学时候偶然听到这首歌，视频不错。</p><h4 id="1-新建用户"><a href="#1-新建用户" class="headerlink" title="1. 新建用户"></a>1. 新建用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd jenkins</span><br><span class="line">passwd jenkins</span><br></pre></td></tr></table></figure><h4 id="2-安装jdk1-8"><a href="#2-安装jdk1-8" class="headerlink" title="2. 安装jdk1.8"></a>2. 安装jdk1.8</h4><p>安装教程：<a href="/2018/04/18/JDK安装/" title="JDK安装">JDK安装</a></p><h4 id="3-用jenkins用户安装tomcat8"><a href="#3-用jenkins用户安装tomcat8" class="headerlink" title="3. 用jenkins用户安装tomcat8"></a>3. 用jenkins用户安装tomcat8</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://124.205.69.162/files/A0460000056AFFBC/mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.14/bin/apache-tomcat-8.5.14.tar.gz</span><br><span class="line">tar -zxvf apache-tomcat-8.5.14.tar.gz</span><br></pre></td></tr></table></figure><h4 id="4-安装git和maven-（不要安装maven3-5版本，有冲突），我用的root用户"><a href="#4-安装git和maven-（不要安装maven3-5版本，有冲突），我用的root用户" class="headerlink" title="4. 安装git和maven.（不要安装maven3.5版本，有冲突），我用的root用户"></a>4. 安装git和maven.（不要安装maven3.5版本，有冲突），我用的root用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一、上传maven包，并解压。（tar -zxvf）</span><br><span class="line">二、修改maven的setting配置文件。</span><br><span class="line">三、将maven安装路径放入环境变量。</span><br><span class="line">四、yum install git。安装git</span><br></pre></td></tr></table></figure><h4 id="5-下载Jenkins并上传至tomcat的webapps目录下"><a href="#5-下载Jenkins并上传至tomcat的webapps目录下" class="headerlink" title="5. 下载Jenkins并上传至tomcat的webapps目录下"></a>5. 下载Jenkins并上传至tomcat的webapps目录下</h4><p> 将Jenkins.war上传至Jenkins的tomcat下。然后启动。<br> <a href="https://jenkins.io/download/" target="_blank" rel="noopener">Jenkins下载</a></p><h4 id="6-开放tomcat端口。启动完成后地址栏访问Jenkins"><a href="#6-开放tomcat端口。启动完成后地址栏访问Jenkins" class="headerlink" title="6. 开放tomcat端口。启动完成后地址栏访问Jenkins."></a>6. 开放tomcat端口。启动完成后地址栏访问Jenkins.</h4><img src="/2018/04/18/Jenkins使用/1.png" title="启动完成"><p>出现上图，表示启动成功。</p><h4 id="7-根据提示，在用户下找这个文件，将文件中字符串复制入输入框即可。"><a href="#7-根据提示，在用户下找这个文件，将文件中字符串复制入输入框即可。" class="headerlink" title="7. 根据提示，在用户下找这个文件，将文件中字符串复制入输入框即可。"></a>7. 根据提示，在用户下找这个文件，将文件中字符串复制入输入框即可。</h4><img src="/2018/04/18/Jenkins使用/2.png" title="输入密匙"><h4 id="8-安装插件-。新手选择推荐安装即可。反之随意。"><a href="#8-安装插件-。新手选择推荐安装即可。反之随意。" class="headerlink" title="8. 安装插件 。新手选择推荐安装即可。反之随意。"></a>8. 安装插件 。新手选择推荐安装即可。反之随意。</h4><img src="/2018/04/18/Jenkins使用/3.png" title="安装插件"><h4 id="9-等待安装完成。新建用户。"><a href="#9-等待安装完成。新建用户。" class="headerlink" title="9. 等待安装完成。新建用户。"></a>9. 等待安装完成。新建用户。</h4><img src="/2018/04/18/Jenkins使用/4.png" title="新建一个用户"><p>然后就可以根据自己的需求下载插件使用了。</p>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
            <tag> Jenkins 使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK安装</title>
      <link href="/2018/04/18/JDK%E5%AE%89%E8%A3%85/"/>
      <url>/2018/04/18/JDK%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=247421&auto=1&height=66"></iframe><p>注意。rpm包必须在官网或其他地址下载。直接wget 官网下载链接会报错。</p><h4 id="1-这里采用rpm安装方式。先下载rpm文件。"><a href="#1-这里采用rpm安装方式。先下载rpm文件。" class="headerlink" title="1. 这里采用rpm安装方式。先下载rpm文件。"></a>1. 这里采用rpm安装方式。先下载rpm文件。</h4><h4 id="2-下载到本地，通过shell使用rz命令上传至服务器。"><a href="#2-下载到本地，通过shell使用rz命令上传至服务器。" class="headerlink" title="2. 下载到本地，通过shell使用rz命令上传至服务器。"></a>2. 下载到本地，通过shell使用rz命令上传至服务器。</h4><pre><code>如果出现如下错误：`-bash: rz: command not found`安装lrzsz：`yum -y install lrzsz`现在就可以正常使用rz、sz命令上传、下载数据了。使用方法：上传文件: rz 会弹出对话框，选择文件上传</code></pre><h4 id="3-上传完成之后，执行命令rpm-ivh-您的jdk包。等待安装完成。安装完成之后，路径在-usr-java-下。"><a href="#3-上传完成之后，执行命令rpm-ivh-您的jdk包。等待安装完成。安装完成之后，路径在-usr-java-下。" class="headerlink" title="3. 上传完成之后，执行命令rpm -ivh 您的jdk包。等待安装完成。安装完成之后，路径在/usr/java/下。"></a>3. 上传完成之后，执行命令<code>rpm -ivh 您的jdk包</code>。等待安装完成。安装完成之后，路径在<code>/usr/java/</code>下。</h4><h4 id="4-配置环境变量。vim-etp-profile"><a href="#4-配置环境变量。vim-etp-profile" class="headerlink" title="4. 配置环境变量。vim /etp/profile"></a>4. 配置环境变量。<code>vim /etp/profile</code></h4><pre><code>在文件最下方加入：JAVA_HOME=/usr/java/jdk1.8.0_151JRE_HOME=/usr/java/jdk1.8.0_151/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport PATH</code></pre><h4 id="5-验证是否配置完成。java-version"><a href="#5-验证是否配置完成。java-version" class="headerlink" title="5. 验证是否配置完成。java -version"></a>5. 验证是否配置完成。<code>java -version</code></h4>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 搭建 nexus 私服</title>
      <link href="/2018/04/18/CentOS-%E6%90%AD%E5%BB%BA-nexus-%E7%A7%81%E6%9C%8D/"/>
      <url>/2018/04/18/CentOS-%E6%90%AD%E5%BB%BA-nexus-%E7%A7%81%E6%9C%8D/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27646196&auto=1&height=66"></iframe><h4 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1. 安装JDK."></a>1. 安装JDK.</h4><p>安装教程：<a href="/2018/04/18/JDK安装/" title="JDK安装">JDK安装</a></p><h4 id="2-推荐新建nexus用户管理nexus。"><a href="#2-推荐新建nexus用户管理nexus。" class="headerlink" title="2. 推荐新建nexus用户管理nexus。"></a>2. 推荐新建nexus用户管理nexus。</h4><pre><code>adduser nexuspasswd nexussu - nexus</code></pre><h4 id="3-下载nexus。本文nexus版本：2-14-8-01-下载地址"><a href="#3-下载nexus。本文nexus版本：2-14-8-01-下载地址" class="headerlink" title="3. 下载nexus。本文nexus版本：2.14.8-01  下载地址"></a>3. 下载nexus。本文nexus版本：2.14.8-01  <a href="https://www.sonatype.com/download-sonatype-trial" target="_blank" rel="noopener">下载地址</a></h4><img src="/2018/04/18/CentOS-搭建-nexus-私服/01.png" title="下载地址"><p>或者直接下载 <code>wget https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.14.1-01-bundle.tar.gz</code></p><h4 id="4-解压文件：tar-zxvf-nexus文件"><a href="#4-解压文件：tar-zxvf-nexus文件" class="headerlink" title="4. 解压文件：tar -zxvf nexus文件"></a>4. 解压文件：<code>tar -zxvf nexus文件</code></h4><img src="/2018/04/18/CentOS-搭建-nexus-私服/02.png" title="解压"><p>第一个文件夹是核心文件，第二个文件夹用来存储下载下来的jar。<br><img src="/2018/04/18/CentOS-搭建-nexus-私服/03.png" title="文件夹"></p><h4 id="5-进入nexus-nexus-2-14-8-01-conf目录下，编辑nexus-properties文件，命令：vim-nexus-properties"><a href="#5-进入nexus-nexus-2-14-8-01-conf目录下，编辑nexus-properties文件，命令：vim-nexus-properties" class="headerlink" title="5. 进入nexus/nexus-2.14.8-01/conf目录下，编辑nexus.properties文件，命令：vim nexus.properties"></a>5. 进入nexus/nexus-2.14.8-01/conf目录下，编辑nexus.properties文件，命令：<code>vim nexus.properties</code></h4><img src="/2018/04/18/CentOS-搭建-nexus-私服/04.png" title="修改配置文件"><h4 id="6-进入nexus-nexus-2-14-8-01-bin目录，vim-nexus，修改启动用户。"><a href="#6-进入nexus-nexus-2-14-8-01-bin目录，vim-nexus，修改启动用户。" class="headerlink" title="6. 进入nexus/nexus-2.14.8-01/bin目录，vim nexus，修改启动用户。"></a>6. 进入nexus/nexus-2.14.8-01/bin目录，<code>vim nexus</code>，修改启动用户。</h4><img src="/2018/04/18/CentOS-搭建-nexus-私服/05.png" title="修改启动用户"><h4 id="7-启动nexus-nexus-start"><a href="#7-启动nexus-nexus-start" class="headerlink" title="7. 启动nexus  ./nexus start"></a>7. 启动nexus  <code>./nexus start</code></h4><h4 id="8-访问nexus-地址-端口-nexus"><a href="#8-访问nexus-地址-端口-nexus" class="headerlink" title="8. 访问nexus  地址:端口/nexus"></a>8. 访问nexus  <code>地址:端口/nexus</code></h4><img src="/2018/04/18/CentOS-搭建-nexus-私服/06.png" title="index"><p>搭建完成。</p><h4 id="9-maven-settings-xml文件修改。"><a href="#9-maven-settings-xml文件修改。" class="headerlink" title="9. maven settings.xml文件修改。"></a>9. maven settings.xml文件修改。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--一、localRepository--&gt;</span></span><br></pre></td></tr></table></figure><img src="/2018/04/18/CentOS-搭建-nexus-私服/07.png" title="localRepository"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--二、mirrors下新建mirror地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>internal-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository Manager running on www.ctfo.com<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://你的私服地址/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--三、maven项目 deploey jar文件。（IDE）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在maven settings.xml文件，新增server配置。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在项目pom文件加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://你的私服地址/nexus/content/repositories/thirdparty/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--然后deploey就到了第三方库。--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 服务搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本站 Next 主题的一些配置</title>
      <link href="/2018/03/16/Next-%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/03/16/Next-%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26508186&auto=1&height=66"></iframe><p>主题的配置。该博客使用Next主题。首先安装主题，在跟目录下运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>   然后使用主题，在根目录_config.yml配置文件中，找到theme。修改为<code>next</code>。设置语言为 <code>language: zh-CN</code>;注意不是<code>themes/next/_config.yml</code></p><h4 id="1-目前-NexT-支持的语言如以下表格所示："><a href="#1-目前-NexT-支持的语言如以下表格所示：" class="headerlink" title="1. 目前 NexT 支持的语言如以下表格所示："></a>1. 目前 NexT 支持的语言如以下表格所示：</h4><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">代码</th><th style="text-align:center">设定实例</th></tr></thead><tbody><tr><td style="text-align:center">English</td><td style="text-align:center">en</td><td style="text-align:center">language: en</td></tr><tr><td style="text-align:center">简体中文</td><td style="text-align:center">zh-Hans</td><td style="text-align:center">language: zh-Hans</td></tr><tr><td style="text-align:center">Français</td><td style="text-align:center">fr-FR</td><td style="text-align:center">language: fr-FR</td></tr><tr><td style="text-align:center">Português</td><td style="text-align:center">pt</td><td style="text-align:center">language: pt</td></tr><tr><td style="text-align:center">繁體中文</td><td style="text-align:center">zh-hk 或者 zh-tw</td><td style="text-align:center">language: zh-hk</td></tr><tr><td style="text-align:center">Русский язык</td><td style="text-align:center">ru</td><td style="text-align:center">language: ru</td></tr><tr><td style="text-align:center">Deutsch</td><td style="text-align:center">de</td><td style="text-align:center">language: de</td></tr><tr><td style="text-align:center">日本語</td><td style="text-align:center">ja</td><td style="text-align:center">language: ja</td></tr><tr><td style="text-align:center">Indonesian</td><td style="text-align:center">id</td><td style="text-align:center">language: id</td></tr></tbody></table><h4 id="2-菜单管理"><a href="#2-菜单管理" class="headerlink" title="2. 菜单管理"></a>2. 菜单管理</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">首页</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">归档</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">关于</span></span><br><span class="line"><span class="attr">  search:</span> <span class="string">搜索</span></span><br><span class="line"><span class="attr">  commonweal:</span> <span class="string">公益404</span></span><br><span class="line"><span class="attr">  something:</span> <span class="string">有料</span></span><br></pre></td></tr></table></figure><h4 id="3-设定对应菜单项的图标，对应的字段是-menu-icons。-此设定格式是-item-name-icon-name，"><a href="#3-设定对应菜单项的图标，对应的字段是-menu-icons。-此设定格式是-item-name-icon-name，" class="headerlink" title="3. 设定对应菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，"></a>3. 设定对应菜单项的图标，对应的字段是 menu_icons。 此设定格式是 <code>item name: icon name</code>，</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Icon Mapping.</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  commonweal:</span> <span class="string">heartbeat</span></span><br></pre></td></tr></table></figure><h4 id="4-启动页面浏览量功能。这里使用的是leancloud。在leancloud官网获取AppID-and-AppKey。"><a href="#4-启动页面浏览量功能。这里使用的是leancloud。在leancloud官网获取AppID-and-AppKey。" class="headerlink" title="4. 启动页面浏览量功能。这里使用的是leancloud。在leancloud官网获取AppID and AppKey。"></a>4. 启动页面浏览量功能。这里使用的是<code>leancloud</code>。在<a href="https://leancloud.cn" target="_blank" rel="noopener">leancloud</a>官网获取AppID and AppKey。</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">   enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">   app_id:</span> <span class="string">yourappid</span> <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line"><span class="attr">   app_key:</span> <span class="string">yourappkey</span> <span class="comment">#&lt;app_key&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-文章评论系统。这里使用的是来必力。第一次使用直接按照套路注册就可以。然后使用免费的City版本，"><a href="#5-文章评论系统。这里使用的是来必力。第一次使用直接按照套路注册就可以。然后使用免费的City版本，" class="headerlink" title="5. 文章评论系统。这里使用的是来必力。第一次使用直接按照套路注册就可以。然后使用免费的City版本，"></a>5. 文章评论系统。这里使用的是来必力。第一次使用直接按照套路注册就可以。然后使用免费的City版本，</h4>  <img src="/2018/03/16/Next-主题的一些配置/next1.jpg" title="安装图示"><p>  点击现在安装，出现如下界面。</p>  <img src="/2018/03/16/Next-主题的一些配置/next2.jpg" title="安装图示"><p>  复制其中的uid字段。打开主题目录下的 <code>blog/themes/next/_config.yml</code> 配置文件，定位到 livere_uid 字段，粘贴上刚刚复制的UID。至此，大功告成。</p><h4 id="6-添加文章分享功能。这里使用AddThis。可以选择样式和哪里分享，很不错。"><a href="#6-添加文章分享功能。这里使用AddThis。可以选择样式和哪里分享，很不错。" class="headerlink" title="6. 添加文章分享功能。这里使用AddThis。可以选择样式和哪里分享，很不错。"></a>6. 添加文章分享功能。这里使用AddThis。可以选择样式和哪里分享，很不错。</h4>  <img src="/2018/03/16/Next-主题的一些配置/next1.png" title="分享展示"><p>  注册账号，慢慢弄，根据喜好，找自己喜欢的样式。注册后找到该位置。</p>  <img src="/2018/03/16/Next-主题的一些配置/next3.jpg"><p>  在主题配置文件中搜索add_this_id，去掉前面的注释，添加上你的AddThis ID就可以了。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Share  分享</span><br><span class="line">#jiathis: true</span><br><span class="line"># Warning: JiaThis does not support https. 博主实测支持https</span><br><span class="line">add_this_id: &#123;your AddThis ID&#125;</span><br></pre></td></tr></table></figure><h4 id="7-打开文章后侧边栏目录显示问题"><a href="#7-打开文章后侧边栏目录显示问题" class="headerlink" title="7. 打开文章后侧边栏目录显示问题"></a>7. 打开文章后侧边栏目录显示问题</h4>  <img src="/2018/03/16/Next-主题的一些配置/next2.png" title="分享展示"><p>  number为true时自动排号。</p><h4 id="8-修改fonts-googleapis-com加载极慢问题。"><a href="#8-修改fonts-googleapis-com加载极慢问题。" class="headerlink" title="8. 修改fonts.googleapis.com加载极慢问题。"></a>8. 修改fonts.googleapis.com加载极慢问题。</h4><p>  在next主题的_config.yml里面找到 <code>host</code> 。然后改为<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Uri of fonts host. E.g. //fonts.googleapis.com (Default).</span><br><span class="line">host: //fonts.lug.ustc.edu.cn # fonts.lug.ustc.edu.cn是中科大的源。</span><br></pre></td></tr></table></figure></p><h4 id="9-修改第三方JS库"><a href="#9-修改第三方JS库" class="headerlink" title="9. 修改第三方JS库"></a>9. 修改第三方JS库</h4><p>  在主题配置文件中设定成合适的 CDN 地址，此特性可以加速静态资源（JavaScript 第三方库）的加载。</p><p>  例如：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># Script Vendors.</span><br><span class="line"># Set a CDN address for the vendor you want to customize.</span><br><span class="line"># For example</span><br><span class="line">#    mquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</span><br><span class="line"># Be aware that you should use the same version as internal ones to avoid potential problems.</span><br><span class="line"># Please use the https protocol of CDN files when you enable https on your site.</span><br><span class="line">vendors:</span><br><span class="line">  # Internal path prefix. Please do not edit it.</span><br><span class="line">  _internal: lib</span><br><span class="line">  </span><br><span class="line">  # Internal version: 2.1.3</span><br><span class="line">  jquery: //cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js</span><br><span class="line">  </span><br><span class="line">  # Internal version: 2.1.5</span><br><span class="line">  # See: http://fancyapps.com/fancybox/</span><br><span class="line">  fancybox: //cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js</span><br><span class="line">  fancybox_css: //cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css</span><br><span class="line">  </span><br><span class="line">  # Internal version: 1.0.6</span><br><span class="line">  # See: https://github.com/ftlabs/fastclick</span><br><span class="line">  fastclick: //cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js</span><br><span class="line">  </span><br><span class="line">  # Internal version: 1.9.7</span><br><span class="line">  # See: https://github.com/tuupola/jquery_lazyload</span><br><span class="line">  lazyload: //cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js</span><br><span class="line">  </span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # See: http://VelocityJS.org</span><br><span class="line">  velocity: //cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js</span><br><span class="line">  </span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # See: http://VelocityJS.org</span><br><span class="line">  velocity_ui: //cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js</span><br><span class="line">  </span><br><span class="line">  # Internal version: 0.7.9</span><br><span class="line">  # See: https://faisalman.github.io/ua-parser-js/</span><br><span class="line">  ua_parser: //cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js</span><br><span class="line">  </span><br><span class="line">  # Internal version: 4.6.2</span><br><span class="line">  # See: http://fontawesome.io/</span><br><span class="line">  fontawesome: //maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css</span><br><span class="line">  </span><br><span class="line">  # Internal version: 1</span><br><span class="line">  # https://www.algolia.com</span><br><span class="line">  algolia_instant_js:</span><br><span class="line">  algolia_instant_css:</span><br><span class="line">  </span><br><span class="line">  # Internal version: 1.0.2</span><br><span class="line">  # See: https://github.com/HubSpot/pace</span><br><span class="line">  # Or use direct links below:</span><br><span class="line">  # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js</span><br><span class="line">  # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span><br><span class="line">  pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js</span><br><span class="line">  pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span><br><span class="line">  </span><br><span class="line">  # Internal version: 1.0.0</span><br><span class="line">  # https://github.com/hustcc/canvas-nest.js</span><br><span class="line">  canvas_nest: //cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js</span><br></pre></td></tr></table></figure></p><h4 id="10-文章末尾统一添加“本文结束”标记"><a href="#10-文章末尾统一添加“本文结束”标记" class="headerlink" title="10. 文章末尾统一添加“本文结束”标记"></a>10. 文章末尾统一添加“本文结束”标记</h4><p>  在路径\themes\next\layout_macro中新建passage-end-tag.swig文件,并添加以下内容：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #555;font-size:14px;&quot;&gt;-------------The End-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>  接着打开\themes\next\layout_macro\post.swig文件，在这个位置添加代码：</p>  <img src="/2018/03/16/Next-主题的一些配置/next4.jpg"><p>  要添加的代码如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>  然后打开主题配置文件，在末尾添加：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Windows安装教程</title>
      <link href="/2018/03/15/Git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/15/Git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><p>直接下载安装就可以。下载地址：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git官网</a></p><h4 id="1-开始安装"><a href="#1-开始安装" class="headerlink" title="1. 开始安装"></a>1. 开始安装</h4><img src="/2018/03/15/Git安装教程/az1.png" title="第一步"><h4 id="2-文件位置存储，可根据自己盘的情况安装"><a href="#2-文件位置存储，可根据自己盘的情况安装" class="headerlink" title="2. 文件位置存储，可根据自己盘的情况安装"></a>2. 文件位置存储，可根据自己盘的情况安装</h4><img src="/2018/03/15/Git安装教程/az2.png" title="第二步"><h4 id="3-安装配置文件，自己需要的都选上，下一步"><a href="#3-安装配置文件，自己需要的都选上，下一步" class="headerlink" title="3. 安装配置文件，自己需要的都选上，下一步"></a>3. 安装配置文件，自己需要的都选上，下一步</h4><img src="/2018/03/15/Git安装教程/az3.png" title="第三步"><h4 id="4-不创建启动文件夹，下一步："><a href="#4-不创建启动文件夹，下一步：" class="headerlink" title="4. 不创建启动文件夹，下一步："></a>4. 不创建启动文件夹，下一步：</h4><img src="/2018/03/15/Git安装教程/az4.png" title="第四步"><h4 id="5-选择默认的编辑器，我们直接用推荐的就行，下一步"><a href="#5-选择默认的编辑器，我们直接用推荐的就行，下一步" class="headerlink" title="5. 选择默认的编辑器，我们直接用推荐的就行，下一步"></a>5. 选择默认的编辑器，我们直接用推荐的就行，下一步</h4><img src="/2018/03/15/Git安装教程/az5.png" title="第五步"><h4 id="6-勾上第二项，这样就可以在cmd中操作，下一步"><a href="#6-勾上第二项，这样就可以在cmd中操作，下一步" class="headerlink" title="6. 勾上第二项，这样就可以在cmd中操作，下一步"></a>6. 勾上第二项，这样就可以在cmd中操作，下一步</h4><img src="/2018/03/15/Git安装教程/az6.png" title="第六步"><h4 id="7-使用默认设置就行，下一步："><a href="#7-使用默认设置就行，下一步：" class="headerlink" title="7. 使用默认设置就行，下一步："></a>7. 使用默认设置就行，下一步：</h4><img src="/2018/03/15/Git安装教程/az7.png" title="第七步"><h4 id="8-配置行结束标记，保持默认“Checkout”"><a href="#8-配置行结束标记，保持默认“Checkout”" class="headerlink" title="8. 配置行结束标记，保持默认“Checkout”"></a>8. 配置行结束标记，保持默认“Checkout”</h4><img src="/2018/03/15/Git安装教程/az8.png" title="第八步"><h4 id="9-在终端模拟器选择页面，默认即可，配置后Git"><a href="#9-在终端模拟器选择页面，默认即可，配置后Git" class="headerlink" title="9. 在终端模拟器选择页面，默认即可，配置后Git"></a>9. 在终端模拟器选择页面，默认即可，配置后Git</h4><img src="/2018/03/15/Git安装教程/az9.png" title="第九步"><h4 id="10-最后配置Git额外选择默认即可，然后安装。"><a href="#10-最后配置Git额外选择默认即可，然后安装。" class="headerlink" title="10. 最后配置Git额外选择默认即可，然后安装。"></a>10. 最后配置Git额外选择默认即可，然后安装。</h4><img src="/2018/03/15/Git安装教程/az10.png" title="第十步"><h4 id="11-安装过程："><a href="#11-安装过程：" class="headerlink" title="11. 安装过程："></a>11. 安装过程：</h4><img src="/2018/03/15/Git安装教程/az11.png" title="第十一步"><h4 id="12-安装完成"><a href="#12-安装完成" class="headerlink" title="12. 安装完成."></a>12. 安装完成.</h4><img src="/2018/03/15/Git安装教程/az12.png" title="安装完成">]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建</title>
      <link href="/2018/03/15/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/03/15/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=30967201&auto=1&height=66"></iframe><br><img src="/2018/03/15/hexo搭建博客/myBlog.jpg" title="我的博客首页"></p><h4 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h4><p>直接下载安装就可以。下载地址：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git官网</a><br>或者，有安装教程：<a href="/2018/03/15/Git安装教程/" title="Git Windows安装教程">Git Windows安装教程</a></p><h4 id="2-安装NodeJS"><a href="#2-安装NodeJS" class="headerlink" title="2. 安装NodeJS"></a>2. 安装NodeJS</h4><p>Hexo是基于nodeJS环境的静态博客，里面的npm工具很有用。而且命令特别简单。</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a>(说明：LTS为长期支持版，Current为当前最新版)</li><li>基本上一路上next就行。注意：Custom Setup中记得选择<code>ADD To Path</code>。这样就不用自己配置环境变量了。不然就和java一样去配置环境变量。</li><li><p>查看版本</p><ul><li><p><code>node -v</code></p><img src="/2018/03/15/hexo搭建博客/node1.png" title="node版本"></li></ul></li></ul><h4 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h4><ul><li>创建一个文件夹，用于存放Blog的所有文件。</li><li>Shift+鼠标右键。在该目录打开命令行，然后执行命令：<code>npm i -g hexo</code></li><li><p>安装完成之后查看版本：<code>hexo -v</code></p>  <img src="/2018/03/15/hexo搭建博客/hexo1.png" title="hexo版本"></li><li><p>初始化。<code>hexo init</code>;运行成功，打开文件夹可看到以下文件。</p>  <img src="/2018/03/15/hexo搭建博客/h1.png" title="初始化"></li><li><p>解释一下</p><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul></li></ul><h4 id="4-将项目在-Github-配置"><a href="#4-将项目在-Github-配置" class="headerlink" title="4. 将项目在 Github 配置"></a>4. 将项目在 Github 配置</h4><ul><li>添加一个repo，名称为<code>yourname.github.io</code>,其中yourname是你的github用户名。必须这个规则创建。</li><li><p>开启<code>GitHub Pages</code>。在Setting配置页中，找到这个项，点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。</p>   <img src="/2018/03/15/hexo搭建博客/h2.png" title="生成成功"></li><li><p>然后就是Blog的一些设置了。</p></li></ul><h4 id="5-Hexo-怎么玩。"><a href="#5-Hexo-怎么玩。" class="headerlink" title="5. Hexo 怎么玩。"></a>5. Hexo 怎么玩。</h4><ul><li><p>命令行自动部署blog。此处必须依赖插件。需先安装一波 <code>npm install hexo-deployer-git --save</code>。然后配置_config.xml文件。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:YangXHero/yangkai.github.io.git</span><br><span class="line">    coding: git@git.coding.net:yangkai92/yangkai92.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>自定义站点文章搜索。需先安装一波 <code>npm install hexo-generator-search --save</code>。然后配置文件。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  # 如只想索引文章，可设置为post</span><br><span class="line">  field: all</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>添加RSS。在主题配置文件中有NexT默认的RSS设置，默认为留空，这时使用 Hexo 生成的 Feed 链接，需要先安装 hexo-generator-feed插件。</p><p>在站点根目录打开git bash，安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>在站点配置文件加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 配置RSS</span><br><span class="line">feed:</span><br><span class="line">  #feed 类型 (atom/rss2)</span><br><span class="line">  type: atom</span><br><span class="line">  #rss 路径</span><br><span class="line">  path: atom.xml</span><br><span class="line">  #在 rss 中最多生成的文章数(0显示所有)</span><br><span class="line">  limit: 0</span><br></pre></td></tr></table></figure><p>修改主题配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&apos;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></li><li><p>在文章中添加图片信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true</span><br><span class="line">  </span><br><span class="line">在你的hexo目录下执行这样一句话npm install hexo-asset-image --save，</span><br><span class="line">这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</span><br><span class="line">  </span><br><span class="line">等待一小段时间后，再运行hexo n &quot;xxxx&quot;来生成md博文时，</span><br><span class="line">/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹</span><br><span class="line"></span><br><span class="line">文章中引用。  `&#123;% asset_img 图片名称 图片描述 %&#125;`</span><br></pre></td></tr></table></figure></li></ul><ul><li>常用命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.hexo new 文章名称</span><br><span class="line">2.hexo g  生成静态文件</span><br><span class="line">3.hexo d  部署，发布。</span><br><span class="line">4.hexo clean 清除上次生成的静态文件。</span><br></pre></td></tr></table></figure></li></ul><ul><li>新建标签和分类页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags    </span><br><span class="line">hexo new page categories</span><br><span class="line">  </span><br><span class="line">在页面对应index.md中加相应的type类型。</span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-08-20 17:31:44</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-08-20 17:31:53</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
